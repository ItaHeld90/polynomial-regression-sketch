{"version":3,"sources":["helper-utils.ts","sketch.ts","regression-canvas-state.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["randomInRange","min","max","Math","floor","random","getSketch","canvasState","optimizer","tf","adam","p5","predict","x_vals","xs","thetas","reduce","res","theta","idx","add","pow","mul","size","denormalizeX","x","map","width","denormalizeY","y","height","setup","createCanvas","windowWidth","windowHeight","draw","background","strokeWeight","stroke","y_vals","ys","cost","length","minimize","pred","label","sub","square","mean","zip","forEach","point","curveX","range","curveY","dataSync","noFill","beginShape","denormX","denormY","vertex","endShape","push","translate","textSize","fill","noStroke","text","toFixed","pop","funcText","fixedTheta","thetaText","componentText","paramsToFunctionText","mousePressed","mouseX","mouseY","normalizeX","normalizeY","RegressionCanvasState","observable","ref","numParams","this","dispose","times","variable","setNumThetas","resetDataPoints","action","computed","App","className","sketch","React","Component","AppControllers","observer","style","margin","display","marginRight","fontStyle","value","onChange","val","type","onClick","reset","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b4a7a55.chunk.js","sourcesContent":["export function randomInRange(min: number, max: number): number {\r\n    return min + Math.floor(Math.random() * (max - min + 1));\r\n}\r\n\r\nexport function paramsToFunctionText(thetas: number[]): string {\r\n    const funcText = thetas.reduce((funcText, theta, idx) => {\r\n        const fixedTheta = theta.toFixed(2);\r\n        const thetaText = theta < 0 ? `(${fixedTheta})` : fixedTheta;\r\n\r\n        const componentText =\r\n            idx === 0\r\n                ? thetaText\r\n                : idx === 1\r\n                ? `${thetaText}x`\r\n                : `${thetaText}x^${idx}`;\r\n\r\n        return idx === 0 ? componentText : `${componentText} + ${funcText}`;\r\n    }, '');\r\n\r\n    return `f(x) = ${funcText}`;\r\n}\r\n","import p5 from 'p5';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport { zip, range } from 'lodash';\r\nimport { RegressionCanvasState } from './regression-canvas-state';\r\nimport { paramsToFunctionText } from './helper-utils';\r\n\r\nexport function getSketch(canvasState: RegressionCanvasState) {\r\n    const learningRate = 0.1;\r\n    const optimizer = tf.train.adam(learningRate);\r\n\r\n    return (p5: p5) => {\r\n        p5.setup = () => {\r\n            p5.createCanvas(\r\n                (p5.windowWidth * 3) / 4,\r\n                (p5.windowHeight * 3) / 4\r\n            );\r\n        };\r\n\r\n        p5.draw = () => {\r\n            p5.background('black');\r\n\r\n            p5.strokeWeight(8);\r\n            p5.stroke('white');\r\n\r\n            tf.tidy(() => {\r\n                const { x_vals, y_vals } = canvasState;\r\n                const ys = tf.tensor1d(y_vals);\r\n\r\n                // train model\r\n                const cost =\r\n                    x_vals.length > 0\r\n                        ? optimizer.minimize(\r\n                              () => loss(predict(x_vals), ys),\r\n                              true,\r\n                              canvasState.thetas\r\n                          )\r\n                        : tf.scalar(0);\r\n\r\n                // draw points\r\n                (zip(x_vals, y_vals) as [number, number][]).forEach(\r\n                    ([x, y]) => {\r\n                        p5.point(denormalizeX(x), denormalizeY(y));\r\n                    }\r\n                );\r\n\r\n                // draw curve\r\n                const curveX = range(-1, 1.01, 0.01);\r\n                const curveY = predict(curveX).dataSync();\r\n\r\n                p5.strokeWeight(3);\r\n                p5.noFill();\r\n                p5.beginShape();\r\n\r\n                curveY.forEach((y: number, idx: number) => {\r\n                    const denormX = denormalizeX(curveX[idx]);\r\n                    const denormY = denormalizeY(y);\r\n                    p5.vertex(denormX, denormY);\r\n                });\r\n\r\n                p5.endShape();\r\n\r\n                // draw cost\r\n                if (cost != null) {\r\n                    p5.push();\r\n                    p5.translate(10, 30);\r\n\r\n                    p5.textSize(16);\r\n                    p5.fill('red');\r\n                    p5.noStroke();\r\n                    p5.text(`Cost: ${(+cost.dataSync()).toFixed(4)}`, 0, 0);\r\n\r\n                    p5.pop();\r\n                }\r\n\r\n                // draw function\r\n                p5.push();\r\n                p5.translate(10, p5.height - 10);\r\n\r\n                p5.textSize(24);\r\n                p5.noStroke();\r\n                p5.fill('green');\r\n\r\n                const parameters = canvasState.thetas.map(\r\n                    theta => +theta.dataSync()\r\n                );\r\n\r\n                const funcText = paramsToFunctionText(parameters);\r\n                p5.text(funcText, 0, 0);\r\n\r\n                p5.pop();\r\n            });\r\n        };\r\n\r\n        p5.mousePressed = () => {\r\n            // ignore clicks outside the canvas\r\n            if (\r\n                p5.mouseX < 0 ||\r\n                p5.mouseX > p5.width ||\r\n                p5.mouseY < 0 ||\r\n                p5.mouseY > p5.height\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            const x = normalizeX(p5.mouseX);\r\n            const y = normalizeY(p5.mouseY);\r\n\r\n            canvasState.x_vals.push(x);\r\n            canvasState.y_vals.push(y);\r\n        };\r\n\r\n        function predict(x_vals: number[]): tf.Tensor<tf.Rank.R1> {\r\n            const xs = tf.tensor1d(x_vals);\r\n\r\n            return canvasState.thetas.reduce(\r\n                (res, theta, idx) => res.add(xs.pow(idx).mul(theta)),\r\n                tf.zeros([xs.size]) as tf.Tensor<tf.Rank.R1>\r\n            );\r\n        }\r\n\r\n        function loss(\r\n            pred: tf.Tensor<tf.Rank.R1>,\r\n            label: tf.Tensor<tf.Rank.R1>\r\n        ): tf.Tensor<tf.Rank.R0> {\r\n            return pred\r\n                .sub(label)\r\n                .square()\r\n                .mean();\r\n        }\r\n\r\n        function normalizeX(x: number): number {\r\n            return p5.map(x, 0, p5.width, -1, 1);\r\n        }\r\n\r\n        function denormalizeX(x: number): number {\r\n            return p5.map(x, -1, 1, 0, p5.width);\r\n        }\r\n\r\n        function normalizeY(y: number): number {\r\n            return p5.map(y, 0, p5.height, 1, -1);\r\n        }\r\n\r\n        function denormalizeY(y: number): number {\r\n            return p5.map(y, -1, 1, p5.height, 0);\r\n        }\r\n    };\r\n}\r\n","import * as tf from '@tensorflow/tfjs';\r\nimport { computed, observable, action } from 'mobx';\r\nimport { times } from 'lodash';\r\nimport { randomInRange } from './helper-utils';\r\n\r\nconst defaultNumParameters = 3;\r\n\r\nexport class RegressionCanvasState {\r\n    x_vals: number[] = [];\r\n    y_vals: number[] = [];\r\n    @observable.ref thetas: tf.Variable<tf.Rank.R0>[] = times(\r\n        defaultNumParameters,\r\n        () => tf.scalar(randomInRange(-1, 1)).variable()\r\n    );\r\n\r\n    @action\r\n    setNumThetas(numParams: number) {\r\n        // dispose old thetas\r\n        this.thetas.forEach(theta => theta.dispose());\r\n\r\n        this.thetas = times(numParams, () =>\r\n            tf.scalar(randomInRange(-1, 1)).variable()\r\n        );\r\n    }\r\n\r\n    @computed\r\n    get numParams(): number {\r\n        return this.thetas.length;\r\n    }\r\n\r\n    @action\r\n    reset() {\r\n        this.setNumThetas(defaultNumParameters);\r\n        this.resetDataPoints();\r\n    }\r\n\r\n    resetDataPoints() {\r\n        this.x_vals = [];\r\n        this.y_vals = [];\r\n    }\r\n}\r\n","//@ts-ignore\nimport P5Wrapper from 'react-p5-wrapper';\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport { Slider, InputNumber, Button } from 'antd';\nimport { getSketch } from './sketch';\nimport { RegressionCanvasState } from './regression-canvas-state';\n\nimport 'antd/dist/antd.css';\n\nconst canvasState = new RegressionCanvasState();\n\nconst minNumParams = 2;\nconst maxNumParams = 20;\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <P5Wrapper sketch={getSketch(canvasState)} />\n                <AppControllers />\n            </div>\n        );\n    }\n}\n\n@observer\nclass AppControllers extends React.Component {\n    render() {\n        return (\n            <div style={{ margin: 10, display: 'flex' }}>\n                <div style={{ marginRight: 100 }}>\n                    <div style={{ fontStyle: 'bold' }}>\n                        Number of Parameters:\n                    </div>\n                    <div style={{ display: 'flex' }}>\n                        <div style={{ width: 200 }}>\n                            <Slider\n                                min={minNumParams}\n                                max={maxNumParams}\n                                value={canvasState.numParams}\n                                onChange={val => {\n                                    typeof val === 'number' &&\n                                        canvasState.setNumThetas(val);\n                                }}\n                            />\n                        </div>\n                        <div>\n                            <InputNumber\n                                min={minNumParams}\n                                max={maxNumParams}\n                                value={canvasState.numParams}\n                                onChange={val => {\n                                    typeof val === 'number' &&\n                                        canvasState.setNumThetas(val);\n                                }}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <Button type=\"danger\" onClick={() => canvasState.reset()}>\n                        Reset\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}